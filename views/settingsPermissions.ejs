<head>
  <title>Settings: Permissions</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg" crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="/style.css">
  <link rel="stylesheet" type="text/css" href="/css/permissions.css">
  <link rel="stylesheet" type="text/css" href="/css/menu.css">

  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Edit permissions for commands">

  <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/pure-min.css" integrity="sha384-" crossorigin="anonymous">



</head>

  <%- include("parts/menu") %>

<body>

  <div class="container">

    <div class="serverList">
      <%  guilds.forEach( (guild) => { %>
        <div class="ServerContainer" value="<%- guild.id%>">
          <img src="<%- guild.icon %>" class="serverIcon">
          <span class="tooltiptext"><%- guild.name%></span>
        </div>
        <br>
      <%} )  %>


    </div>

    <div class="content">



      <form method="post" action="/settings/permissions" id="contentRoles">



      <input type="submit" class="submit"/>
      </form>




    </div>


    </div>

  </div>




</body>
<script>
  let getJSON = function(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    xhr.onload = function() {
      var status = xhr.status;
      if (status === 200) {
        callback(null, xhr.response);
      } else {
        callback(status, xhr.response);
      }
    };
    xhr.send();
  };
  let content = document.getElementById("contentRoles")

  getJSON('/commands.json',function(err, data){
    console.log(data)



    Object.keys(data.servers).forEach(function(key) {

      let roleContainer = document.createElement("div");
      roleContainer.setAttribute("class","roleContainer");
      roleContainer.setAttribute("id",key);
      roleContainer.setAttribute("style","display:none")




      data.servers[key].roles.forEach( role =>{

        let roleTitle = document.createElement("div");

        let roleName = document.createElement("div");
        roleName.setAttribute("class","roleName");
        roleName.setAttribute("style",`color:${role.color.toString(16)}`)
        roleName.innerHTML = role.name;

        let roleId = document.createElement("div");
        roleId.setAttribute("class","roleId");
        roleId.innerHTML = role.id;

        roleContainer.appendChild(roleName);

        roleContainer.appendChild(roleId);

        content.appendChild(roleContainer)

        let commandContainer = document.createElement("div");
        commandContainer.setAttribute("class","commandContainer");
        commandContainer.setAttribute("id",key);

        Object.keys(data.commands).forEach(function(cmd) {



          let commandName = document.createElement("div");
          commandName.setAttribute("class","commandName");
          commandName.innerHTML = cmd

          let commandHidden = document.createElement("input");
          commandHidden.setAttribute("type","hidden");
          commandHidden.setAttribute("value","0")
          commandHidden.setAttribute("name",`"${cmd}" "${role.id}" "${key}"`);

          let commandCheck = document.createElement("input");
          commandCheck.setAttribute("type","checkbox");
          commandCheck.setAttribute("class",".commandSelect")
          commandCheck.setAttribute("value","1")
          commandCheck.setAttribute("name",`"${cmd}" "${role.id}" "${key}"`);



          let enabled = false;
          role.enabled.forEach( enm =>{
            if(enm == cmd){

              enabled = true;
            }
          })

          if(enabled){
            commandCheck.setAttribute("checked","checked");
            }
            //every command
          commandContainer.appendChild(commandName);
          commandContainer.appendChild(commandHidden);
          commandContainer.appendChild(commandCheck);
          roleContainer.appendChild(commandContainer)

        })
        //every role

      })
      //every server

      content.appendChild(roleContainer)


    });
    updateButtons()

    });


    function updateButtons(){
      Array.from(document.getElementsByClassName("serverContainer")).forEach( (button, index)=>{
        let value = document.getElementsByClassName("serverContainer")[index].getAttribute("value");

          button.onclick = function(e){

            Array.from(document.getElementsByClassName("roleContainer")).forEach( (server, index)=>{
              server.setAttribute("style","display:none;")
            })

            document.getElementById(`${value}`).setAttribute("style","display:block")


          }
      })
    }

    //swipe code
document.addEventListener('touchstart', handleTouchStart, false);
document.addEventListener('touchmove', handleTouchMove, false);

var xDown = null;
var yDown = null;

function handleTouchStart(evt) {
    xDown = evt.touches[0].clientX;
    yDown = evt.touches[0].clientY;
};

function handleTouchMove(evt) {
    if ( ! xDown || ! yDown ) {
        return;
    }

    var xUp = evt.touches[0].clientX;
    var yUp = evt.touches[0].clientY;

    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;

    if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/
        if ( xDiff > 0 ) {
            /* left swipe */
            window.location.href = '/settings';
        } else {
            /* right swipe */
            window.location.href = '/music';
        }
    } else {
        if ( yDiff > 0 ) {
            /* up swipe */
        } else {
            /* down swipe */
        }
    }
    /* reset values */
    xDown = null;
    yDown = null;
};

</script>
</html>
